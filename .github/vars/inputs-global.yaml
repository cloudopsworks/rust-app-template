organization_name: "ORG_NAME"
organization_unit: "ORG_UNIT"
environment_name: "ENV_NAME"
repository_owner: "REPO_OWNER" # Required
#
## Default Go version is latest "stable", uncomment to build with different version,
## Dist & Arch are for cross-compilation, if not specified will use the default for the OS image
## Image variant should be used for the specific version of OS image to run (container)
#rust:
#  version: stable | 1.70 | 1.87.0
#  dist: unknown-linux-gnu
#  arch: x86_64
#  image_variant: alpine:3.21
#
# Set Snyk processing to true if want to enable, the tool is disabled by default
#snyk:
#  enabled: true
#
# Set Semgrep processing to true if want to enable, the tool is disabled by default
#semgrep:
#  enabled: true
#
# Set Sonarqube processing to true if want to enable, the tool is disabled by default
#sonarqube:
#  enabled: true
#  fail_on_quality_gate: true
#  quality_gate_enabled: false # defaults to true
#  sources_path: "src/"
#  binaries_path: "target/classes"
#  libraries_path: "target/libs/**/*.jar" # defaults to blank
#  tests_path: "src/"
#  tests_binaries: "target/test-classes"
#  tests_inclusions: "src/**/test/**/*"
#  tests_libraries: "target/libs/**/*.jar" # defaults to blank
#  exclusions: "target/**,"src/**/test/**/*"
#  extra_exclusions:
#  branch_disabled: true # uncomment only if you are using Community Sonarqube
#
# Set DependencyTrack processing to false if want to disable, the tool is enabled by default
# type: is one of => Library , Application , Container , Framework , Device , Firmware , File , Operating System
#       Default type is Application
#dependencyTrack:
#  enabled: true
#  type: Application
#
# Set if this is a library project
#isLibrary: true
#
# Dockerfile Inline content that will be merged into the Dockerfile
#docker_inline: |
#  # Dockerfile content here
#  # Example:
#  # WORKDIR /app
#  # COPY package*.json ./
#  # COPY ./mydir ./my dest
#
# Docker Arguments that will be passed to Docker Build Process
#docker_args: |
#  ARG1=value1
#  ARG2=value2
#  ARG3=value3
#
# Custom command that will be placed as startup script in dockerfile
#custom_run_command: alternate_script.sh
#
# Custom User Group Command, this command can be uncommented in some cases to cover the proper
# User creation on images like based on Busybox or Redhat UBI-8/9 or Fedora
#custom_usergroup: |
#  groupadd --gid $GROUP_ID --system $GROUP_NAME \
#    && useradd --uid $USER_ID --system --gid $GROUP_ID --home /app/webapp $USER_NAME
#
# Path where the API definitions are stored if different of default ./apifiles
#api_files_dir: "relative-path-to-apidefs"
#
# Optional Additional ENV variables for build
#build_options: ""
#
# Optional Additional ENV variables for tests
#test_options: ""
#
# Preview configuration, if enabled will create a preview environment for each PR
#preview:
#  enabled: true
#  kubernetes: true
#  domain: example.com
#
# API Gateway configuration, if enabled will deploy apis to the environment api gateway
# configuration is done under .github/vars/apigw/
#apis:
#  enabled: true
#
# Observability configuration: if enabled will deploy observability tools to the environment
#observability:
#  enabled: true
#  agent: xray | newrelic | datadog | dynatrace (optional: defaults to xray)
#  config:
#    # XRAY agent Configuration
#    configFilePath: /app/xray
#    configFileName: xray-config.json
#    contextMissingStrategy: LOG_ERROR
#    tracingEnabled: "true"
#    samplingStrategy: CENTRAL | LOCAL | NONE | ALL
#    traceIdInjectionPrefix: ""
#    samplingRulesManifest: "path-to-sampling-rules-manifest"
#    awsServiceHandlerManifest: "path-to-aws-service-handler-manifest"
#    awsSdkVersion: 1 | 2
#    maxStackTraceLength: 50
#    streamingThreshold: 100
#    traceIdInjection: "true"
#    pluginsEnabled: "true"
#    collectSqlQueries: "false"
#    contextPropagation: "true"
#    # DataDog agent Configuration
#    tags: tag1=value1,tag2=value2
#    logs_enabled: "true"
#    logs_config_container_collect_all: "true"
#    container_exclude_logs: "name:datadog-agent"
#    trace_debug: "false"
#    logs_injection: "true"
#    profiling_enabled: "true"
#    trace_sample_rate: 1.0
#    trace_sampling_rules: "path-to-sampling-rules"
#    apm_non_local_traffic: "true"
#    apm_enabled: "true"
#    dogstatsd_non_local_traffic: "true"
#    http_client_error_statuses: "400,401,403,404,405,409,410,429,500,501,502,503,504,505"
#    http_server_error_statuses: "500,501,502,503,504,505"
#
## CD pipeline configuration uncomment and configure accordingly to enable
# Target Cloud
cloud: aws | azure | gcp
# Cloud deployment type depends on the target cloud
cloud_type: beanstalk | eks | lambda | aks | webapp | function | gke | function | kubernetes
# Indicate the Runner that will be used for the deployment - usually will be a hosted runner
# runner_set: "arc-runner-set"
